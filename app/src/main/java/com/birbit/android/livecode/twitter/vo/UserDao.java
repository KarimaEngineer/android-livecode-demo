package com.birbit.android.livecode.twitter.vo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.birbit.android.livecode.twitter.vo.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id =new Property(0, String.class , "id", true, "_id");
        public final static Property Description =new Property(1, String.class , "description", false, "DESCRIPTION");
        public final static Property Following =new Property(2, Boolean.class , "following", false, "FOLLOWING");
        public final static Property ScreenName =new Property(3, String.class , "screenName", false, "SCREEN_NAME");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'DESCRIPTION' TEXT," + // 1: description
                "'FOLLOWING' INTEGER," + // 2: following
                "'SCREEN_NAME' TEXT);"); // 3: screenName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        entity.onBeforeSave();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);

        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);

        }
 
        Boolean following = entity.getFollowing();
        if (following != null) {
            stmt.bindLong(3, following ? 1l: 0l);

        }
 
        String screenName = entity.getScreenName();
        if (screenName != null) {
            stmt.bindString(4, screenName);

        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //

            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) , // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) , // description
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0 , // following
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // screenName
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) );
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) );
        entity.setFollowing(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0 );
        entity.setScreenName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) );
     }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }

    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
